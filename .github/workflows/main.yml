on:
  push:
  pull_request:
  # for now, CRON jobs only run on the default branch of the repo (i.e. usually on master)
  schedule:
    # * is a special character in YAML so you have to quote this string
    - cron: "0 4 * * *"

name: R CMD Check via {tic}

jobs:
  R-CMD-check:
    runs-on: ${{ matrix.config.os }}

    name: ${{ matrix.config.os }} (${{ matrix.config.r }})

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, ubuntu-latest, ubuntu-latest]
        include: 
        - os: ubuntu-latest
          r: "release"
          env: test  
        - os: ubuntu-latest
          r: "release"
          env: test2  
      # matrix:
      #   config:
      #     # comment out lines if you do not want to build on certain platforms
      #     - { os: macOS-latest, r: "release", env: "test"}
      #     - { os: macOS-latest, r: "release", env: "test2"}

    env:
      # otherwise remotes::fun() errors cause the build to fail. Example: Unavailability of binaries
      R_REMOTES_NO_ERRORS_FROM_WARNINGS: true
      CRAN: ${{ matrix.config.cran }}
      # we are not allowed to write to ~/.ccache on GH Actions
      # setting some ccache options
      CCACHE_BASEDIR: ${{ GITHUB.WORKSPACE }}
      CCACHE_DIR: ${{ GITHUB.WORKSPACE }}/.ccache
      CCACHE_NOHASHDIR: true
      CCACHE_SLOPPINESS: include_file_ctime
      # make sure to run `tic::use_ghactions_deploy()` to set up deployment
      TIC_DEPLOY_KEY: ${{ secrets.TIC_DEPLOY_KEY }}
      # prevent rgl issues because no X11 display is available
      RGL_USE_NULL: true

    steps:
      - uses: actions/checkout@v2

      - uses: r-lib/actions/setup-r@master
        with:
          r-version: ${{ matrix.config.r }}
          Ncpus: 4

      # set date/week for use in cache creation
      # https://github.community/t5/GitHub-Actions/How-to-set-and-access-a-Workflow-variable/m-p/42970
      # - cache R packages daily
      # - cache ccache weekly -> 'ccache' helps rebuilding the package cache faster
      - name: "[Cache] Prepare daily timestamp for cache"
        if: runner.os != 'Windows'
        id: date
        run: echo "::set-output name=date::$(date '+%d-%m')"

      - name: "[Cache] Prepare weekly timestamp for cache"
        if: runner.os != 'Windows'
        id: datew
        run: echo "::set-output name=datew::$(date '+%Y-%V')"

      # - name: "[Cache] Cache R packages"
      #   if: runner.os != 'Windows'
      #   uses: pat-s/always-upload-cache@v1.1.4
      #   with:
      #     path: ${{ env.R_LIBS_USER }}
      #     key: ${{ runner.os }}-r-${{ matrix.config.r }}-${{steps.date.outputs.date}}
      #     restore-keys: ${{ runner.os }}-r-${{ matrix.config.r }}-${{steps.date.outputs.date}}

      # - name: "[Cache] Cache ccache"
      #   if: runner.os != 'Windows'
      #   uses: pat-s/always-upload-cache@v1.1.4
      #   with:
      #     path: ${{ env.CCACHE_DIR}}
      #     key: ${{ runner.os }}-r-${{ matrix.config.r }}-ccache-${{steps.datew.outputs.datew}}
      #     restore-keys: ${{ runner.os }}-r-${{ matrix.config.r }}-ccache-${{steps.datew.outputs.datew}}

      # # install ccache and write config file
      # - name: "[Linux] ccache"
      #   if: runner.os == 'Linux'
      #   run: |
      #     sudo apt install ccache libcurl4-openssl-dev
      #     mkdir -p ~/.R && echo -e 'CXX_STD = CXX14\n\nCC=ccache gcc -std=gnu99\nCXX=ccache g++\nCXX11=ccache g++ -std=gnu99\nCXX14=ccache g++ -std=gnu99\nC11=ccache g++\nC14=ccache g++\nFC=ccache gfortran\nF77=ccache gfortran' > $HOME/.R/Makevars

      # # install ccache and write config file
      # # mirror the setup described in https://github.com/rmacoslib/r-macos-rtools
      # - name: "[macOS] ccache"
      #   if: runner.os == 'macOS' && matrix.config.r != 'devel'
      #   run: |
      #     brew install ccache
      #     wget https://cran.r-project.org/bin/macosx/tools/clang-7.0.0.pkg
      #     sudo installer -package clang-7.0.0.pkg -target /
      #     mkdir -p ~/.R && echo -e 'CXX_STD = CXX14\n\nCC=ccache /usr/local/clang7/bin/clang\nCC11=ccache /usr/local/clang7/bin/clang\nCC14=ccache /usr/local/clang7/bin/clang\nCXX=ccache /usr/local/clang7/bin/clang++\nCXX11=ccache /usr/local/clang7/bin/clang++\nCXX14=ccache /usr/local/clang7/bin/clang++\nC11=ccache /usr/local/clang7/bin/clang++\nC14=ccache /usr/local/clang7/bin/clang++\nF77=ccache gfortran/nCFLAGS=-isysroot /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk\nCXXFLAGS=-isysroot /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk\nCCFLAGS=-isysroot /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk\nCFLAGS=-isysroot /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk' > $HOME/.R/Makevars
      #     R CMD javareconf

      # # install ccache and write config file
      # # mirror the setup described in https://github.com/rmacoslib/r-macos-rtools
      # - name: "[macOS-devel] ccache"
      #   if: runner.os == 'macOS' && matrix.config.r == 'devel'
      #   run: |
      #     brew install ccache
      #     wget https://cran.r-project.org/bin/macosx/tools/clang-8.0.0.pkg
      #     sudo installer -package clang-8.0.0.pkg -target /
      #     mkdir -p ~/.R && echo -e 'CXX_STD = CXX14\n\nCC=ccache /usr/local/clang8/bin/clang\nCC11=ccache /usr/local/clang8/bin/clang\nCC14=ccache /usr/local/clang8/bin/clang\nCXX=ccache /usr/local/clang8/bin/clang++\nCXX11=ccache /usr/local/clang8/bin/clang++\nCXX14=ccache /usr/local/clang8/bin/clang++\nC11=ccache /usr/local/clang8/bin/clang++\nC14=ccache /usr/local/clang8/bin/clang++\nF88=ccache gfortran/nCFLAGS=-isysroot /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk\nCXXFLAGS=-isysroot /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk\nCCFLAGS=-isysroot /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk\nCFLAGS=-isysroot /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk' > $HOME/.R/Makevars
      #     R CMD javareconf

      # for some strange Windows reason this step and the next one need to be decoupled
      - name: "[Stage] Test"
        if: ${{matrix.env}} == "test"
        run: |
          Rscript -e "if (!requireNamespace('future.test')) install.packages('future.test')"
          Rscript -e "future.tests::check(plan = 'multisession')"
