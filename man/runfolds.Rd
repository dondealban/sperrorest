% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/helper_funs.R
\name{runfolds}
\alias{runfolds}
\title{runfolds}
\usage{
runfolds(j = NULL, currentSample = NULL, data = NULL, formula = NULL,
  model.args = NULL, par.cl = NULL, par.mode = NULL, do.try = NULL,
  model.fun = NULL, error.fold = NULL, error.rep = NULL,
  pred.fun = NULL, imp.variables = NULL, imp.permutations = NULL,
  err.fun = NULL, train.fun = NULL, err.train = NULL, importance = NULL,
  currentRes = NULL, currentImpo = NULL, pred.args = NULL,
  progress = NULL, pooled.obs.train = NULL, pooled.obs.test = NULL,
  pooled.pred.train = NULL, response = NULL, is.factor.prediction = NULL,
  pooled.pred.test = NULL, coords = NULL, test.fun = NULL,
  imp.one.rep = NULL, i = NULL)
}
\description{
runfolds
}
\examples{

j <- 1 # running the first repetition of 'currentSample', normally we are 
# calling an apply call to seq_along nFolds of repetition
# see also 'runreps()'
data <- ecuador
imp.one.rep <- readRDS("inst/test-objects/imp.one.rep.rda")
currentSample <- readRDS("inst/test-objects/resamp.rda")[[1]]
currentRes <- readRDS("inst/test-objects/currentRes.rda")

runfolds_single <- runfolds(j = 1, data = ecuador, currentSample = currentSample,
formula = slides ~ dem + slope + hcurv + vcurv + log.carea + cslope, 
model.args = list(family = "binomial"), do.try = FALSE, model.fun = glm,
error.fold = TRUE, error.rep = TRUE, imp.permutations = 2, 
imp.variables = c("dem", "slope", "hcurv", "vcurv", "log.carea", "cslope"),
err.train = TRUE, importance = TRUE, currentRes = currentRes, 
pred.args = list(type = "response"), response = "slides", par.cl = 2, 
coords = c("x", "y"), progress = 1, pooled.obs.train = c(), 
pooled.obs.test = c(), err.fun = err.default)

### LDA
library(MASS)
currentSample <- partition.cv(maipo, nfold = 4, repetition = 2)[[1]]
lda.predfun <- function(object, newdata, fac = NULL) {
library(nnet)
majority <- function(x) {
  levels(x)[which.is.max(table(x))]
}

majority.filter <- function(x, fac) {
  for (lev in levels(fac)) {
    x[ fac == lev ] <- majority(x[ fac == lev ])
  }
  x
}

pred <- predict(object, newdata = newdata)$class
if (!is.null(fac)) pred <- majority.filter(pred, newdata[,fac])
return(pred)
 }
 
data("maipo", package = "sperrorest")
predictors <- colnames(maipo)[5:ncol(maipo)]
fo <- as.formula(paste("croptype ~", paste(predictors, collapse = "+")))

runfolds_single <- runfolds(j = 1, data = maipo, currentSample = currentSample,
formula = fo, 
do.try = FALSE, model.fun = lda, pred.fun = lda.predfun,
error.fold = TRUE, error.rep = TRUE, pred.args = list(fac = "field"),
err.train = TRUE, importance = FALSE, currentRes = currentSample, 
response = "croptype", par.cl = 2, 
coords = c("x", "y"), progress = 1, pooled.obs.train = c(), 
pooled.obs.test = c(), err.fun = err.default)

### rpart example
data(ecuador)
fo <- slides ~ dem + slope + hcurv + vcurv + log.carea + cslope

mypred.rpart <- function(object, newdata) predict(object, newdata)[, 2]
ctrl <- rpart.control(cp = 0.005) # show the effects of overfitting

# Non-spatial 5-repeated 10-fold cross-validation:
mypred.rpart <- function(object, newdata) predict(object, newdata)[,2]

runfolds_single <- runfolds(j = 1, data = ecuador, currentSample = currentSample,
formula = slides ~ dem + slope + hcurv + vcurv + log.carea + cslope, 
do.try = FALSE, model.fun = rpart,
error.fold = TRUE, error.rep = TRUE, imp.permutations = 2, pred.fun = mypred.rpart, 
model.args = list(control = ctrl),
imp.variables = c("dem", "slope", "hcurv", "vcurv", "log.carea", "cslope"),
err.train = TRUE, importance = TRUE, currentRes = currentRes, 
response = "slides", par.cl = 2, 
coords = c("x", "y"), progress = 1, pooled.obs.train = c(), 
pooled.obs.test = c(), err.fun = err.default)

runfolds_list <- map(seq_along(1:4), function(rep) runfolds(j = rep, data = ecuador, currentSample = currentSample,
formula = slides ~ dem + slope + hcurv + vcurv + log.carea + cslope, 
do.try = FALSE, model.fun = rpart,
error.fold = TRUE, error.rep = TRUE, imp.permutations = 2, pred.fun = mypred.rpart, 
model.args = list(control = ctrl),
imp.variables = c("dem", "slope", "hcurv", "vcurv", "log.carea", "cslope"),
err.train = TRUE, importance = TRUE, currentRes = currentRes, 
response = "slides", par.cl = 2, 
coords = c("x", "y"), progress = 1, pooled.obs.train = c(), 
pooled.obs.test = c(), err.fun = err.default))

# create list with multiple fold results
runfolds_list <- map(seq_along(1:4), function(rep) runfolds(j = rep, data = ecuador, currentSample = currentSample,
formula = slides ~ dem + slope + hcurv + vcurv + log.carea + cslope, 
model.args = list(family = "binomial"), do.try = FALSE, model.fun = glm,
error.fold = TRUE, error.rep = TRUE, imp.permutations = 2, 
imp.variables = c("dem", "slope", "hcurv", "vcurv", "log.carea", "cslope"),
err.train = TRUE, importance = TRUE, currentRes = currentRes, 
pred.args = list(type = "response"), response = "slides", par.cl = 2, 
coords = c("x", "y"), progress = 1, pooled.obs.train = c(), 
pooled.obs.test = c(), err.fun = err.default))

# MERGE SUBLISTS: ONLY CURRENTRES AND CURRENTIMPO

}
\keyword{internal}
